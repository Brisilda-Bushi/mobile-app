04511c7799d1c519ba196507d9d290ca
'use strict';

var VERSION = require("../env/data").version;

var validators = {};
['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function (type, i) {
  validators[type] = function validator(thing) {
    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
  };
});
var deprecatedWarnings = {};

validators.transitional = function transitional(validator, version, message) {
  function formatMessage(opt, desc) {
    return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
  }

  return function (value, opt, opts) {
    if (validator === false) {
      throw new Error(formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')));
    }

    if (version && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      console.warn(formatMessage(opt, ' has been deprecated since v' + version + ' and will be removed in the near future'));
    }

    return validator ? validator(value, opt, opts) : true;
  };
};

function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== 'object') {
    throw new TypeError('options must be an object');
  }

  var keys = Object.keys(options);
  var i = keys.length;

  while (i-- > 0) {
    var opt = keys[i];
    var validator = schema[opt];

    if (validator) {
      var value = options[opt];
      var result = value === undefined || validator(value, opt, options);

      if (result !== true) {
        throw new TypeError('option ' + opt + ' must be ' + result);
      }

      continue;
    }

    if (allowUnknown !== true) {
      throw Error('Unknown option ' + opt);
    }
  }
}

module.exports = {
  assertOptions: assertOptions,
  validators: validators
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZhbGlkYXRvci5qcyJdLCJuYW1lcyI6WyJWRVJTSU9OIiwicmVxdWlyZSIsInZlcnNpb24iLCJ2YWxpZGF0b3JzIiwiZm9yRWFjaCIsInR5cGUiLCJpIiwidmFsaWRhdG9yIiwidGhpbmciLCJkZXByZWNhdGVkV2FybmluZ3MiLCJ0cmFuc2l0aW9uYWwiLCJtZXNzYWdlIiwiZm9ybWF0TWVzc2FnZSIsIm9wdCIsImRlc2MiLCJ2YWx1ZSIsIm9wdHMiLCJFcnJvciIsImNvbnNvbGUiLCJ3YXJuIiwiYXNzZXJ0T3B0aW9ucyIsIm9wdGlvbnMiLCJzY2hlbWEiLCJhbGxvd1Vua25vd24iLCJUeXBlRXJyb3IiLCJrZXlzIiwiT2JqZWN0IiwibGVuZ3RoIiwicmVzdWx0IiwidW5kZWZpbmVkIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBSUEsT0FBTyxHQUFHQyxPQUFPLGVBQVAsQ0FBdUJDLE9BQXJDOztBQUVBLElBQUlDLFVBQVUsR0FBRyxFQUFqQjtBQUdBLENBQUMsUUFBRCxFQUFXLFNBQVgsRUFBc0IsUUFBdEIsRUFBZ0MsVUFBaEMsRUFBNEMsUUFBNUMsRUFBc0QsUUFBdEQsRUFBZ0VDLE9BQWhFLENBQXdFLFVBQVNDLElBQVQsRUFBZUMsQ0FBZixFQUFrQjtBQUN4RkgsRUFBQUEsVUFBVSxDQUFDRSxJQUFELENBQVYsR0FBbUIsU0FBU0UsU0FBVCxDQUFtQkMsS0FBbkIsRUFBMEI7QUFDM0MsV0FBTyxPQUFPQSxLQUFQLEtBQWlCSCxJQUFqQixJQUF5QixPQUFPQyxDQUFDLEdBQUcsQ0FBSixHQUFRLElBQVIsR0FBZSxHQUF0QixJQUE2QkQsSUFBN0Q7QUFDRCxHQUZEO0FBR0QsQ0FKRDtBQU1BLElBQUlJLGtCQUFrQixHQUFHLEVBQXpCOztBQVNBTixVQUFVLENBQUNPLFlBQVgsR0FBMEIsU0FBU0EsWUFBVCxDQUFzQkgsU0FBdEIsRUFBaUNMLE9BQWpDLEVBQTBDUyxPQUExQyxFQUFtRDtBQUMzRSxXQUFTQyxhQUFULENBQXVCQyxHQUF2QixFQUE0QkMsSUFBNUIsRUFBa0M7QUFDaEMsV0FBTyxhQUFhZCxPQUFiLEdBQXVCLDBCQUF2QixHQUFvRGEsR0FBcEQsR0FBMEQsSUFBMUQsR0FBaUVDLElBQWpFLElBQXlFSCxPQUFPLEdBQUcsT0FBT0EsT0FBVixHQUFvQixFQUFwRyxDQUFQO0FBQ0Q7O0FBR0QsU0FBTyxVQUFTSSxLQUFULEVBQWdCRixHQUFoQixFQUFxQkcsSUFBckIsRUFBMkI7QUFDaEMsUUFBSVQsU0FBUyxLQUFLLEtBQWxCLEVBQXlCO0FBQ3ZCLFlBQU0sSUFBSVUsS0FBSixDQUFVTCxhQUFhLENBQUNDLEdBQUQsRUFBTSx1QkFBdUJYLE9BQU8sR0FBRyxTQUFTQSxPQUFaLEdBQXNCLEVBQXBELENBQU4sQ0FBdkIsQ0FBTjtBQUNEOztBQUVELFFBQUlBLE9BQU8sSUFBSSxDQUFDTyxrQkFBa0IsQ0FBQ0ksR0FBRCxDQUFsQyxFQUF5QztBQUN2Q0osTUFBQUEsa0JBQWtCLENBQUNJLEdBQUQsQ0FBbEIsR0FBMEIsSUFBMUI7QUFFQUssTUFBQUEsT0FBTyxDQUFDQyxJQUFSLENBQ0VQLGFBQWEsQ0FDWEMsR0FEVyxFQUVYLGlDQUFpQ1gsT0FBakMsR0FBMkMseUNBRmhDLENBRGY7QUFNRDs7QUFFRCxXQUFPSyxTQUFTLEdBQUdBLFNBQVMsQ0FBQ1EsS0FBRCxFQUFRRixHQUFSLEVBQWFHLElBQWIsQ0FBWixHQUFpQyxJQUFqRDtBQUNELEdBakJEO0FBa0JELENBeEJEOztBQWlDQSxTQUFTSSxhQUFULENBQXVCQyxPQUF2QixFQUFnQ0MsTUFBaEMsRUFBd0NDLFlBQXhDLEVBQXNEO0FBQ3BELE1BQUksT0FBT0YsT0FBUCxLQUFtQixRQUF2QixFQUFpQztBQUMvQixVQUFNLElBQUlHLFNBQUosQ0FBYywyQkFBZCxDQUFOO0FBQ0Q7O0FBQ0QsTUFBSUMsSUFBSSxHQUFHQyxNQUFNLENBQUNELElBQVAsQ0FBWUosT0FBWixDQUFYO0FBQ0EsTUFBSWYsQ0FBQyxHQUFHbUIsSUFBSSxDQUFDRSxNQUFiOztBQUNBLFNBQU9yQixDQUFDLEtBQUssQ0FBYixFQUFnQjtBQUNkLFFBQUlPLEdBQUcsR0FBR1ksSUFBSSxDQUFDbkIsQ0FBRCxDQUFkO0FBQ0EsUUFBSUMsU0FBUyxHQUFHZSxNQUFNLENBQUNULEdBQUQsQ0FBdEI7O0FBQ0EsUUFBSU4sU0FBSixFQUFlO0FBQ2IsVUFBSVEsS0FBSyxHQUFHTSxPQUFPLENBQUNSLEdBQUQsQ0FBbkI7QUFDQSxVQUFJZSxNQUFNLEdBQUdiLEtBQUssS0FBS2MsU0FBVixJQUF1QnRCLFNBQVMsQ0FBQ1EsS0FBRCxFQUFRRixHQUFSLEVBQWFRLE9BQWIsQ0FBN0M7O0FBQ0EsVUFBSU8sTUFBTSxLQUFLLElBQWYsRUFBcUI7QUFDbkIsY0FBTSxJQUFJSixTQUFKLENBQWMsWUFBWVgsR0FBWixHQUFrQixXQUFsQixHQUFnQ2UsTUFBOUMsQ0FBTjtBQUNEOztBQUNEO0FBQ0Q7O0FBQ0QsUUFBSUwsWUFBWSxLQUFLLElBQXJCLEVBQTJCO0FBQ3pCLFlBQU1OLEtBQUssQ0FBQyxvQkFBb0JKLEdBQXJCLENBQVg7QUFDRDtBQUNGO0FBQ0Y7O0FBRURpQixNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDZlgsRUFBQUEsYUFBYSxFQUFFQSxhQURBO0FBRWZqQixFQUFBQSxVQUFVLEVBQUVBO0FBRkcsQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBWRVJTSU9OID0gcmVxdWlyZSgnLi4vZW52L2RhdGEnKS52ZXJzaW9uO1xuXG52YXIgdmFsaWRhdG9ycyA9IHt9O1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuWydvYmplY3QnLCAnYm9vbGVhbicsICdudW1iZXInLCAnZnVuY3Rpb24nLCAnc3RyaW5nJywgJ3N5bWJvbCddLmZvckVhY2goZnVuY3Rpb24odHlwZSwgaSkge1xuICB2YWxpZGF0b3JzW3R5cGVdID0gZnVuY3Rpb24gdmFsaWRhdG9yKHRoaW5nKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGluZyA9PT0gdHlwZSB8fCAnYScgKyAoaSA8IDEgPyAnbiAnIDogJyAnKSArIHR5cGU7XG4gIH07XG59KTtcblxudmFyIGRlcHJlY2F0ZWRXYXJuaW5ncyA9IHt9O1xuXG4vKipcbiAqIFRyYW5zaXRpb25hbCBvcHRpb24gdmFsaWRhdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufGJvb2xlYW4/fSB2YWxpZGF0b3IgLSBzZXQgdG8gZmFsc2UgaWYgdGhlIHRyYW5zaXRpb25hbCBvcHRpb24gaGFzIGJlZW4gcmVtb3ZlZFxuICogQHBhcmFtIHtzdHJpbmc/fSB2ZXJzaW9uIC0gZGVwcmVjYXRlZCB2ZXJzaW9uIC8gcmVtb3ZlZCBzaW5jZSB2ZXJzaW9uXG4gKiBAcGFyYW0ge3N0cmluZz99IG1lc3NhZ2UgLSBzb21lIG1lc3NhZ2Ugd2l0aCBhZGRpdGlvbmFsIGluZm9cbiAqIEByZXR1cm5zIHtmdW5jdGlvbn1cbiAqL1xudmFsaWRhdG9ycy50cmFuc2l0aW9uYWwgPSBmdW5jdGlvbiB0cmFuc2l0aW9uYWwodmFsaWRhdG9yLCB2ZXJzaW9uLCBtZXNzYWdlKSB7XG4gIGZ1bmN0aW9uIGZvcm1hdE1lc3NhZ2Uob3B0LCBkZXNjKSB7XG4gICAgcmV0dXJuICdbQXhpb3MgdicgKyBWRVJTSU9OICsgJ10gVHJhbnNpdGlvbmFsIG9wdGlvbiBcXCcnICsgb3B0ICsgJ1xcJycgKyBkZXNjICsgKG1lc3NhZ2UgPyAnLiAnICsgbWVzc2FnZSA6ICcnKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgb3B0LCBvcHRzKSB7XG4gICAgaWYgKHZhbGlkYXRvciA9PT0gZmFsc2UpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihmb3JtYXRNZXNzYWdlKG9wdCwgJyBoYXMgYmVlbiByZW1vdmVkJyArICh2ZXJzaW9uID8gJyBpbiAnICsgdmVyc2lvbiA6ICcnKSkpO1xuICAgIH1cblxuICAgIGlmICh2ZXJzaW9uICYmICFkZXByZWNhdGVkV2FybmluZ3Nbb3B0XSkge1xuICAgICAgZGVwcmVjYXRlZFdhcm5pbmdzW29wdF0gPSB0cnVlO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgZm9ybWF0TWVzc2FnZShcbiAgICAgICAgICBvcHQsXG4gICAgICAgICAgJyBoYXMgYmVlbiBkZXByZWNhdGVkIHNpbmNlIHYnICsgdmVyc2lvbiArICcgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmVhciBmdXR1cmUnXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbGlkYXRvciA/IHZhbGlkYXRvcih2YWx1ZSwgb3B0LCBvcHRzKSA6IHRydWU7XG4gIH07XG59O1xuXG4vKipcbiAqIEFzc2VydCBvYmplY3QncyBwcm9wZXJ0aWVzIHR5cGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge29iamVjdH0gc2NoZW1hXG4gKiBAcGFyYW0ge2Jvb2xlYW4/fSBhbGxvd1Vua25vd25cbiAqL1xuXG5mdW5jdGlvbiBhc3NlcnRPcHRpb25zKG9wdGlvbnMsIHNjaGVtYSwgYWxsb3dVbmtub3duKSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb25zIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gIH1cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvcHRpb25zKTtcbiAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSA+IDApIHtcbiAgICB2YXIgb3B0ID0ga2V5c1tpXTtcbiAgICB2YXIgdmFsaWRhdG9yID0gc2NoZW1hW29wdF07XG4gICAgaWYgKHZhbGlkYXRvcikge1xuICAgICAgdmFyIHZhbHVlID0gb3B0aW9uc1tvcHRdO1xuICAgICAgdmFyIHJlc3VsdCA9IHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsaWRhdG9yKHZhbHVlLCBvcHQsIG9wdGlvbnMpO1xuICAgICAgaWYgKHJlc3VsdCAhPT0gdHJ1ZSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb24gJyArIG9wdCArICcgbXVzdCBiZSAnICsgcmVzdWx0KTtcbiAgICAgIH1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoYWxsb3dVbmtub3duICE9PSB0cnVlKSB7XG4gICAgICB0aHJvdyBFcnJvcignVW5rbm93biBvcHRpb24gJyArIG9wdCk7XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBhc3NlcnRPcHRpb25zOiBhc3NlcnRPcHRpb25zLFxuICB2YWxpZGF0b3JzOiB2YWxpZGF0b3JzXG59O1xuIl19