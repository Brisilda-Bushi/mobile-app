394ec0ce865190a912aac4d284f614be
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _actions = require("../redux/actions");

var _reactNative = require("react-native");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var marginBottomItem = 20;
var paddingItem = 10;
var imgHeight = 100;
var sizeOfItem = imgHeight + paddingItem * 2 + marginBottomItem;
var backgroundImg = 'https://images.unsplash.com/photo-1519750783826-e2420f4d687f?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxleHBsb3JlLWZlZWR8Mnx8fGVufDB8fHx8&w=1000&q=8';

var HomeScreen = function HomeScreen() {
  var _useSelector = (0, _reactRedux.useSelector)(function (state) {
    return state.userReducer;
  }),
      users = _useSelector.users;

  var dispatch = (0, _reactRedux.useDispatch)();

  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      isLoading = _useState2[0],
      setIsloading = _useState2[1];

  var Yscroll = _react.default.useRef(new _reactNative.Animated.Value(0)).current;

  (0, _react.useEffect)(function () {
    setTimeout(function () {
      dispatch((0, _actions.getUsers)());
    }, 6000);
  }, [dispatch]);

  var renderUser = function renderUser(_ref) {
    var item = _ref.item,
        index = _ref.index;
    var scale = Yscroll.interpolate({
      inputRange: [-1, 0, sizeOfItem * index, sizeOfItem * (index + 2)],
      outputRange: [1, 1, 1, 0]
    });
    return _react.default.createElement(_reactNative.Animated.View, {
      style: [styles.item, {
        transform: [{
          scale: scale
        }]
      }]
    }, _react.default.createElement(_reactNative.Image, {
      style: styles.image,
      source: {
        uri: "" + item.owner.avatar_url
      },
      resizeMode: "contain",
      contentContainerStyle: {
        padding: 20
      }
    }), _react.default.createElement(_reactNative.View, {
      style: styles.wrapText
    }, _react.default.createElement(_reactNative.Text, {
      style: styles.fontSize
    }, item.owner.login), _react.default.createElement(_reactNative.Text, {
      style: styles.created
    }, item.created_at.split(/T(.+)/)[0])));
  };

  return _react.default.createElement(_reactNative.SafeAreaView, {
    style: styles.container
  }, _react.default.createElement(_reactNative.Image, {
    source: {
      uri: backgroundImg
    },
    style: _reactNative.StyleSheet.absoluteFillObject
  }), _react.default.createElement(_reactNative.View, null, _react.default.createElement(_reactNative.Text, {
    testID: "myText",
    style: styles.title
  }, "Mobile App Listing")), isLoading ? _react.default.createElement(_reactNative.ActivityIndicator, null) : _react.default.createElement(_reactNative.Animated.FlatList, {
    data: users,
    keyExtractor: function keyExtractor(item) {
      return "key-" + item.id;
    },
    renderItem: renderUser,
    keyExtractor: function keyExtractor(item, index) {
      return String(index);
    },
    contentContainerStyle: {
      padding: 20
    },
    onScroll: _reactNative.Animated.event([{
      nativeEvent: {
        contentOffset: {
          y: Yscroll
        }
      }
    }], {
      useNativeDriver: true
    })
  }));
};

var styles = _reactNative.StyleSheet.create({
  fontSize: {
    fontSize: 18
  },
  title: {
    fontSize: 22,
    fontWeight: "bold",
    display: 'flex',
    flexDirection: 'row',
    textAlign: "center",
    padding: 10,
    color: "white"
  },
  created: {
    color: "gray"
  },
  image: {
    width: 100,
    borderRadius: 100,
    height: imgHeight
  },
  wrapText: {
    flex: 1,
    marginLeft: 10,
    justifyContent: 'center'
  },
  item: {
    flexDirection: 'row',
    marginBottom: marginBottomItem,
    borderRadius: 12,
    backgroundColor: '#fff',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 10
    },
    shadowOpacity: .3,
    shadowRadius: 30,
    padding: paddingItem
  },
  container: {
    flex: 1,
    top: "5%"
  }
});

var _default = HomeScreen;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkhvbWVTY3JlZW4uanMiXSwibmFtZXMiOlsibWFyZ2luQm90dG9tSXRlbSIsInBhZGRpbmdJdGVtIiwiaW1nSGVpZ2h0Iiwic2l6ZU9mSXRlbSIsImJhY2tncm91bmRJbWciLCJIb21lU2NyZWVuIiwic3RhdGUiLCJ1c2VyUmVkdWNlciIsInVzZXJzIiwiZGlzcGF0Y2giLCJpc0xvYWRpbmciLCJzZXRJc2xvYWRpbmciLCJZc2Nyb2xsIiwiUmVhY3QiLCJ1c2VSZWYiLCJBbmltYXRlZCIsIlZhbHVlIiwiY3VycmVudCIsInNldFRpbWVvdXQiLCJyZW5kZXJVc2VyIiwiaXRlbSIsImluZGV4Iiwic2NhbGUiLCJpbnRlcnBvbGF0ZSIsImlucHV0UmFuZ2UiLCJvdXRwdXRSYW5nZSIsInN0eWxlcyIsInRyYW5zZm9ybSIsImltYWdlIiwidXJpIiwib3duZXIiLCJhdmF0YXJfdXJsIiwicGFkZGluZyIsIndyYXBUZXh0IiwiZm9udFNpemUiLCJsb2dpbiIsImNyZWF0ZWQiLCJjcmVhdGVkX2F0Iiwic3BsaXQiLCJjb250YWluZXIiLCJTdHlsZVNoZWV0IiwiYWJzb2x1dGVGaWxsT2JqZWN0IiwidGl0bGUiLCJpZCIsIlN0cmluZyIsImV2ZW50IiwibmF0aXZlRXZlbnQiLCJjb250ZW50T2Zmc2V0IiwieSIsInVzZU5hdGl2ZURyaXZlciIsImNyZWF0ZSIsImZvbnRXZWlnaHQiLCJkaXNwbGF5IiwiZmxleERpcmVjdGlvbiIsInRleHRBbGlnbiIsImNvbG9yIiwid2lkdGgiLCJib3JkZXJSYWRpdXMiLCJoZWlnaHQiLCJmbGV4IiwibWFyZ2luTGVmdCIsImp1c3RpZnlDb250ZW50IiwibWFyZ2luQm90dG9tIiwiYmFja2dyb3VuZENvbG9yIiwic2hhZG93Q29sb3IiLCJzaGFkb3dPZmZzZXQiLCJzaGFkb3dPcGFjaXR5Iiwic2hhZG93UmFkaXVzIiwidG9wIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7Ozs7O0FBV0EsSUFB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QUFTLEVBQUUsUUFMTjtBQU1MdEIsSUFBQUEsT0FBTyxFQUFFLEVBTko7QUFPTHVCLElBQUFBLEtBQUssRUFBRTtBQVBGLEdBSndCO0FBYS9CbkIsRUFBQUEsT0FBTyxFQUFFO0FBQ1BtQixJQUFBQSxLQUFLLEVBQUU7QUFEQSxHQWJzQjtBQWdCL0IzQixFQUFBQSxLQUFLLEVBQUU7QUFDTDRCLElBQUFBLEtBQUssRUFBRSxHQURGO0FBRUxDLElBQUFBLFlBQVksRUFBRSxHQUZUO0FBS0xDLElBQUFBLE1BQU0sRUFBRXhEO0FBTEgsR0FoQndCO0FBdUIvQitCLEVBQUFBLFFBQVEsRUFBRTtBQUNSMEIsSUFBQUEsSUFBSSxFQUFFLENBREU7QUFFUkMsSUFBQUEsVUFBVSxFQUFFLEVBRko7QUFHUkMsSUFBQUEsY0FBYyxFQUFFO0FBSFIsR0F2QnFCO0FBNEIvQnpDLEVBQUFBLElBQUksRUFBRTtBQUNKaUMsSUFBQUEsYUFBYSxFQUFFLEtBRFg7QUFFSlMsSUFBQUEsWUFBWSxFQUFFOUQsZ0JBRlY7QUFHSnlELElBQUFBLFlBQVksRUFBRSxFQUhWO0FBSUpNLElBQUFBLGVBQWUsRUFBRSxNQUpiO0FBS0pDLElBQUFBLFdBQVcsRUFBRSxNQUxUO0FBTUpDLElBQUFBLFlBQVksRUFBRTtBQUNaVCxNQUFBQSxLQUFLLEVBQUUsQ0FESztBQUVaRSxNQUFBQSxNQUFNLEVBQUU7QUFGSSxLQU5WO0FBVUpRLElBQUFBLGFBQWEsRUFBRSxFQVZYO0FBV0pDLElBQUFBLFlBQVksRUFBRSxFQVhWO0FBWUpuQyxJQUFBQSxPQUFPLEVBQUUvQjtBQVpMLEdBNUJ5QjtBQTBDL0JzQyxFQUFBQSxTQUFTLEVBQUU7QUFDVG9CLElBQUFBLElBQUksRUFBRSxDQURHO0FBRVRTLElBQUFBLEdBQUcsRUFBRTtBQUZJO0FBMUNvQixDQUFsQixDQUFmOztlQWlEZS9ELFUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVNlbGVjdG9yLHVzZURpc3BhdGNoIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgZ2V0VXNlcnMgfSBmcm9tIFwiLi4vcmVkdXgvYWN0aW9uc1wiXG5pbXBvcnQge1xuICBBY3Rpdml0eUluZGljYXRvcixcbiAgRmxhdExpc3QsXG4gIFNhZmVBcmVhVmlldyxcbiAgU3R5bGVTaGVldCxcbiAgVGV4dCxcbiAgVmlldyxcbiAgSW1hZ2UsXG4gIEFuaW1hdGVkXG59IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5cbmNvbnN0IG1hcmdpbkJvdHRvbUl0ZW0gPSAyMDtcbmNvbnN0IHBhZGRpbmdJdGVtID0gMTA7XG5jb25zdCBpbWdIZWlnaHQgPSAxMDA7XG5jb25zdCBzaXplT2ZJdGVtID0gaW1nSGVpZ2h0ICsgcGFkZGluZ0l0ZW0gKiAyICsgbWFyZ2luQm90dG9tSXRlbTtcblxuY29uc3QgYmFja2dyb3VuZEltZyA9ICdodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTUxOTc1MDc4MzgyNi1lMjQyMGY0ZDY4N2Y/aXhsaWI9cmItMS4yLjEmaXhpZD1Nbnd4TWpBM2ZEQjhNSHhsZUhCc2IzSmxMV1psWldSOE1ueDhmR1Z1ZkRCOGZIeDgmdz0xMDAwJnE9OCdcblxuXG5jb25zdCBIb21lU2NyZWVuID0gKCkgPT4ge1xuICBjb25zdCB7IHVzZXJzIH0gPSB1c2VTZWxlY3RvcihzdGF0ZSA9PiBzdGF0ZS51c2VyUmVkdWNlcik7XG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcbiAgY29uc3QgW2lzTG9hZGluZywgc2V0SXNsb2FkaW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICBjb25zdCBZc2Nyb2xsID0gUmVhY3QudXNlUmVmKG5ldyBBbmltYXRlZC5WYWx1ZSgwKSkuY3VycmVudDtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgZGlzcGF0Y2goZ2V0VXNlcnMoKSlcbiAgICB9LDYwMDApXG4gIH0sIFtkaXNwYXRjaF0pXG5cbiAgY29uc3QgcmVuZGVyVXNlciA9ICh7IGl0ZW0sIGluZGV4IH0pID0+IHtcbiAgICBjb25zdCBzY2FsZSA9IFlzY3JvbGwuaW50ZXJwb2xhdGUoe1xuICAgICAgaW5wdXRSYW5nZTogW1xuICAgICAgICAtMSwgMCxcbiAgICAgICAgc2l6ZU9mSXRlbSAqIGluZGV4LFxuICAgICAgICBzaXplT2ZJdGVtICogKGluZGV4ICsgMilcbiAgICAgIF0sXG4gICAgICBvdXRwdXRSYW5nZTogWzEsIDEsIDEsIDBdXG4gICAgfSlcbiAgICByZXR1cm4gKFxuICAgICAgPEFuaW1hdGVkLlZpZXcgc3R5bGU9e1xuICAgICAgICBbc3R5bGVzLml0ZW0sXG4gICAgICAgIHtcbiAgICAgICAgICB0cmFuc2Zvcm06IFt7IHNjYWxlIH1dXG4gICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfT5cbiAgICAgICAgPEltYWdlXG4gICAgICAgICAgc3R5bGU9e3N0eWxlcy5pbWFnZX1cbiAgICAgICAgICBzb3VyY2U9e3t1cmk6IGAke2l0ZW0ub3duZXIuYXZhdGFyX3VybH1gfX1cbiAgICAgICAgICByZXNpemVNb2RlPSdjb250YWluJ1xuICAgICAgICAgIGNvbnRlbnRDb250YWluZXJTdHlsZT17eyBwYWRkaW5nOiAyMCB9fVxuICAgICAgICAvPlxuICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLndyYXBUZXh0fT5cbiAgICAgICAgICA8VGV4dCBzdHlsZT17c3R5bGVzLmZvbnRTaXplfT57aXRlbS5vd25lci5sb2dpbn08L1RleHQ+XG4gICAgICAgICAgPFRleHQgc3R5bGU9e3N0eWxlcy5jcmVhdGVkfT57aXRlbS5jcmVhdGVkX2F0LnNwbGl0KC9UKC4rKS8pWzBdfTwvVGV4dD5cbiAgICAgICAgPC9WaWV3PlxuICAgICAgICB7LyogPEltYWdlXG4gICAgICAgICAgc3R5bGU9e3N0eWxlcy5pbWFnZX1cbiAgICAgICAgICBzb3VyY2U9e3t1cmk6IGAke2l0ZW0uYW5pbWVfaW1nfWB9fVxuICAgICAgICAgIHJlc2l6ZU1vZGU9J2NvbnRhaW4nXG4gICAgICAgICAgY29udGVudENvbnRhaW5lclN0eWxlPXt7IHBhZGRpbmc6IDIwIH19XG4gICAgICAgIC8+XG4gICAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMud3JhcFRleHR9PlxuICAgICAgICAgIDxUZXh0IHN0eWxlPXtzdHlsZXMuZm9udFNpemV9PntpdGVtLmFuaW1lX25hbWV9PC9UZXh0PlxuICAgICAgICAgIDxUZXh0IHN0eWxlPXtzdHlsZXMuY3JlYXRlZH0+e2l0ZW0uYW5pbWVfaWR9PC9UZXh0PlxuICAgICAgICA8L1ZpZXc+ICovfVxuICAgICAgPC9BbmltYXRlZC5WaWV3PlxuICAgIClcblxuICB9XG5cblxuICByZXR1cm4gKFxuICAgIDxTYWZlQXJlYVZpZXcgc3R5bGU9e3N0eWxlcy5jb250YWluZXJ9PlxuICAgICAgPEltYWdlXG4gICAgICAgIHNvdXJjZT17eyB1cmk6IGJhY2tncm91bmRJbWcgfX1cbiAgICAgICAgc3R5bGU9e1N0eWxlU2hlZXQuYWJzb2x1dGVGaWxsT2JqZWN0fVxuICAgICAgLz5cbiAgICAgIDxWaWV3PlxuICAgICAgICA8VGV4dCB0ZXN0SUQ9XCJteVRleHRcIiBzdHlsZT17c3R5bGVzLnRpdGxlfT5Nb2JpbGUgQXBwIExpc3Rpbmc8L1RleHQ+XG4gICAgICA8L1ZpZXc+XG4gICAgICB7XG4gICAgICAgIGlzTG9hZGluZyA/IDxBY3Rpdml0eUluZGljYXRvciAvPiA6IChcbiAgICAgICAgICA8QW5pbWF0ZWQuRmxhdExpc3RcbiAgICAgICAgICAgIC8vIGRhdGE9e3VzZXJzLmRhdGF9XG4gICAgICAgICAgICBkYXRhPXt1c2Vyc31cbiAgICAgICAgICAgIGtleUV4dHJhY3Rvcj17aXRlbSA9PiBga2V5LSR7aXRlbS5pZH1gfVxuICAgICAgICAgICAgcmVuZGVySXRlbT17cmVuZGVyVXNlcn1cbiAgICAgICAgICAgIGtleUV4dHJhY3Rvcj17KGl0ZW0sIGluZGV4KSA9PiBTdHJpbmcoaW5kZXgpfVxuICAgICAgICAgICAgY29udGVudENvbnRhaW5lclN0eWxlPXt7XG4gICAgICAgICAgICAgIHBhZGRpbmc6IDIwXG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgb25TY3JvbGw9e1xuICAgICAgICAgICAgICBBbmltYXRlZC5ldmVudChcbiAgICAgICAgICAgICAgICBbeyBuYXRpdmVFdmVudDogeyBjb250ZW50T2Zmc2V0OiB7IHk6IFlzY3JvbGwgfSB9IH1dLFxuICAgICAgICAgICAgICAgIHsgdXNlTmF0aXZlRHJpdmVyOiB0cnVlIH1cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAvPlxuICAgICAgICApXG4gICAgICB9XG4gICAgPC9TYWZlQXJlYVZpZXc+XG4gICk7XG59O1xuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIGZvbnRTaXplOiB7XG4gICAgZm9udFNpemU6IDE4XG4gIH0sXG4gIHRpdGxlOiB7XG4gICAgZm9udFNpemU6IDIyLFxuICAgIGZvbnRXZWlnaHQ6IFwiYm9sZFwiLFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBmbGV4RGlyZWN0aW9uOiAncm93JyxcbiAgICB0ZXh0QWxpZ246IFwiY2VudGVyXCIsXG4gICAgcGFkZGluZzogMTAsXG4gICAgY29sb3I6IFwid2hpdGVcIixcbiAgfSxcbiAgY3JlYXRlZDoge1xuICAgIGNvbG9yOiBcImdyYXlcIixcbiAgfSxcbiAgaW1hZ2U6IHtcbiAgICB3aWR0aDogMTAwLFxuICAgIGJvcmRlclJhZGl1czogMTAwLFxuICAgIC8vIHdpZHRoOiAxMDAsXG4gICAgLy8gYm9yZGVyUmFkaXVzOiA1MCxcbiAgICBoZWlnaHQ6IGltZ0hlaWdodFxuICB9LFxuICB3cmFwVGV4dDoge1xuICAgIGZsZXg6IDEsXG4gICAgbWFyZ2luTGVmdDogMTAsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInXG4gIH0sXG4gIGl0ZW06IHtcbiAgICBmbGV4RGlyZWN0aW9uOiAncm93JyxcbiAgICBtYXJnaW5Cb3R0b206IG1hcmdpbkJvdHRvbUl0ZW0sXG4gICAgYm9yZGVyUmFkaXVzOiAxMixcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjZmZmJyxcbiAgICBzaGFkb3dDb2xvcjogJyMwMDAnLFxuICAgIHNoYWRvd09mZnNldDoge1xuICAgICAgd2lkdGg6IDAsXG4gICAgICBoZWlnaHQ6IDEwXG4gICAgfSxcbiAgICBzaGFkb3dPcGFjaXR5OiAuMyxcbiAgICBzaGFkb3dSYWRpdXM6IDMwLFxuICAgIHBhZGRpbmc6IHBhZGRpbmdJdGVtXG4gIH0sXG4gIGNvbnRhaW5lcjoge1xuICAgIGZsZXg6IDEsXG4gICAgdG9wOiBcIjUlXCIsXG4gIH1cblxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IEhvbWVTY3JlZW47Il19