0e3e82ec24fa60b70bedf5edba75746c
'use strict';

var Cancel = require("./Cancel");

function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });
  var token = this;
  this.promise.then(function (cancel) {
    if (!token._listeners) return;
    var i;
    var l = token._listeners.length;

    for (i = 0; i < l; i++) {
      token._listeners[i](cancel);
    }

    token._listeners = null;
  });

  this.promise.then = function (onfulfilled) {
    var _resolve;

    var promise = new Promise(function (resolve) {
      token.subscribe(resolve);
      _resolve = resolve;
    }).then(onfulfilled);

    promise.cancel = function reject() {
      token.unsubscribe(_resolve);
    };

    return promise;
  };

  executor(function cancel(message) {
    if (token.reason) {
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

CancelToken.prototype.subscribe = function subscribe(listener) {
  if (this.reason) {
    listener(this.reason);
    return;
  }

  if (this._listeners) {
    this._listeners.push(listener);
  } else {
    this._listeners = [listener];
  }
};

CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
  if (!this._listeners) {
    return;
  }

  var index = this._listeners.indexOf(listener);

  if (index !== -1) {
    this._listeners.splice(index, 1);
  }
};

CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNhbmNlbFRva2VuLmpzIl0sIm5hbWVzIjpbIkNhbmNlbCIsInJlcXVpcmUiLCJDYW5jZWxUb2tlbiIsImV4ZWN1dG9yIiwiVHlwZUVycm9yIiwicmVzb2x2ZVByb21pc2UiLCJwcm9taXNlIiwiUHJvbWlzZSIsInByb21pc2VFeGVjdXRvciIsInJlc29sdmUiLCJ0b2tlbiIsInRoZW4iLCJjYW5jZWwiLCJfbGlzdGVuZXJzIiwiaSIsImwiLCJsZW5ndGgiLCJvbmZ1bGZpbGxlZCIsIl9yZXNvbHZlIiwic3Vic2NyaWJlIiwicmVqZWN0IiwidW5zdWJzY3JpYmUiLCJtZXNzYWdlIiwicmVhc29uIiwicHJvdG90eXBlIiwidGhyb3dJZlJlcXVlc3RlZCIsImxpc3RlbmVyIiwicHVzaCIsImluZGV4IiwiaW5kZXhPZiIsInNwbGljZSIsInNvdXJjZSIsImMiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJQSxNQUFNLEdBQUdDLE9BQU8sWUFBcEI7O0FBUUEsU0FBU0MsV0FBVCxDQUFxQkMsUUFBckIsRUFBK0I7QUFDN0IsTUFBSSxPQUFPQSxRQUFQLEtBQW9CLFVBQXhCLEVBQW9DO0FBQ2xDLFVBQU0sSUFBSUMsU0FBSixDQUFjLDhCQUFkLENBQU47QUFDRDs7QUFFRCxNQUFJQyxjQUFKO0FBRUEsT0FBS0MsT0FBTCxHQUFlLElBQUlDLE9BQUosQ0FBWSxTQUFTQyxlQUFULENBQXlCQyxPQUF6QixFQUFrQztBQUMzREosSUFBQUEsY0FBYyxHQUFHSSxPQUFqQjtBQUNELEdBRmMsQ0FBZjtBQUlBLE1BQUlDLEtBQUssR0FBRyxJQUFaO0FBR0EsT0FBS0osT0FBTCxDQUFhSyxJQUFiLENBQWtCLFVBQVNDLE1BQVQsRUFBaUI7QUFDakMsUUFBSSxDQUFDRixLQUFLLENBQUNHLFVBQVgsRUFBdUI7QUFFdkIsUUFBSUMsQ0FBSjtBQUNBLFFBQUlDLENBQUMsR0FBR0wsS0FBSyxDQUFDRyxVQUFOLENBQWlCRyxNQUF6Qjs7QUFF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dXNlIHN0cmljdCc7XG5cbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuL0NhbmNlbCcpO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIENhbmNlbFRva2VuKGV4ZWN1dG9yKSB7XG4gIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgcmVzb2x2ZVByb21pc2U7XG5cbiAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gcHJvbWlzZUV4ZWN1dG9yKHJlc29sdmUpIHtcbiAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gIH0pO1xuXG4gIHZhciB0b2tlbiA9IHRoaXM7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgdGhpcy5wcm9taXNlLnRoZW4oZnVuY3Rpb24oY2FuY2VsKSB7XG4gICAgaWYgKCF0b2tlbi5fbGlzdGVuZXJzKSByZXR1cm47XG5cbiAgICB2YXIgaTtcbiAgICB2YXIgbCA9IHRva2VuLl9saXN0ZW5lcnMubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgdG9rZW4uX2xpc3RlbmVyc1tpXShjYW5jZWwpO1xuICAgIH1cbiAgICB0b2tlbi5fbGlzdGVuZXJzID0gbnVsbDtcbiAgfSk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgdGhpcy5wcm9taXNlLnRoZW4gPSBmdW5jdGlvbihvbmZ1bGZpbGxlZCkge1xuICAgIHZhciBfcmVzb2x2ZTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkge1xuICAgICAgdG9rZW4uc3Vic2NyaWJlKHJlc29sdmUpO1xuICAgICAgX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgIH0pLnRoZW4ob25mdWxmaWxsZWQpO1xuXG4gICAgcHJvbWlzZS5jYW5jZWwgPSBmdW5jdGlvbiByZWplY3QoKSB7XG4gICAgICB0b2tlbi51bnN1YnNjcmliZShfcmVzb2x2ZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9O1xuXG4gIGV4ZWN1dG9yKGZ1bmN0aW9uIGNhbmNlbChtZXNzYWdlKSB7XG4gICAgaWYgKHRva2VuLnJlYXNvbikge1xuICAgICAgLy8gQ2FuY2VsbGF0aW9uIGhhcyBhbHJlYWR5IGJlZW4gcmVxdWVzdGVkXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdG9rZW4ucmVhc29uID0gbmV3IENhbmNlbChtZXNzYWdlKTtcbiAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICB9KTtcbn1cblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUudGhyb3dJZlJlcXVlc3RlZCA9IGZ1bmN0aW9uIHRocm93SWZSZXF1ZXN0ZWQoKSB7XG4gIGlmICh0aGlzLnJlYXNvbikge1xuICAgIHRocm93IHRoaXMucmVhc29uO1xuICB9XG59O1xuXG4vKipcbiAqIFN1YnNjcmliZSB0byB0aGUgY2FuY2VsIHNpZ25hbFxuICovXG5cbkNhbmNlbFRva2VuLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgbGlzdGVuZXIodGhpcy5yZWFzb24pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICB0aGlzLl9saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fbGlzdGVuZXJzID0gW2xpc3RlbmVyXTtcbiAgfVxufTtcblxuLyoqXG4gKiBVbnN1YnNjcmliZSBmcm9tIHRoZSBjYW5jZWwgc2lnbmFsXG4gKi9cblxuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gdW5zdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgaWYgKCF0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGluZGV4ID0gdGhpcy5fbGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgdGhpcy5fbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcbiJdfQ==