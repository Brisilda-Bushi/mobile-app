{"version":3,"sources":["HomeScreen.test.js"],"names":["jest","useFakeTimers","store","Store","tree","renderer","create","test","toJSON","expect","toMatchSnapshot","mock","get","fn","Promise","resolve","runAllTimers","text","root","findByProps","testID","props","children","toEqual","undefined","users"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;AAGAA,IAAI,CAACC,aAAL;AAEA,IAAMC,KAAK,GAAG;AAAEC,EAAAA,KAAK,EAALA;AAAF,CAAd;;AAEA,IAAMC,IAAI,GAAGC,2BAASC,MAAT,CACX,6BAAC,oBAAD;AAAU,EAAA,KAAK,EAAEH;AAAjB,GACE,6BAAC,mBAAD,OADF,CADW,CAAb;;AAKAI,IAAI,CAAC,mBAAD,EAAsB,YAAM;AAC9BH,EAAAA,IAAI,CAACI,MAAL;AACAC,EAAAA,MAAM,CAACL,IAAD,CAAN,CAAaM,eAAb;AACD,CAHG,CAAJ;AAKAH,IAAI,CAAC,cAAD,EAAiB,YAAM;AACzB,gBAAKI,IAAL,CAAU,OAAV,EAAmB;AAAA,WAAO;AACxBC,MAAAA,GAAG,EAAEZ,IAAI,CAACa,EAAL,CAAQ,YAAM;AACjB,eAAOC,OAAO,CAACC,OAAR,EAAP;AACD,OAFI;AADmB,KAAP;AAAA,GAAnB;;AAKA,8BAAI;AAAA,WAAMf,IAAI,CAACgB,YAAL,EAAN;AAAA,GAAJ;AACA,MAAMC,IAAI,GAAGb,IAAI,CAACc,IAAL,CAAUC,WAAV,CAAsB;AAACC,IAAAA,MAAM,EAAE;AAAT,GAAtB,EAA0CC,KAAvD;AACAZ,EAAAA,MAAM,CAACQ,IAAI,CAACK,QAAN,CAAN,CAAsBC,OAAtB,CAA8B,oBAA9B;AACD,CATG,CAAJ;AAWAhB,IAAI,CAAC,mCAAD,EAAsC,YAAM;AAC9C,gBAAKI,IAAL,CAAU,OAAV,EAAmB;AAAA,WAAO;AACxBC,MAAAA,GAAG,EAAEZ,IAAI,CAACa,EAAL,CAAQ,YAAM;AACjB,eAAOC,OAAO,CAACC,OAAR,EAAP;AACD,OAFI;AADmB,KAAP;AAAA,GAAnB;AAKD,CANG,CAAJ;AAQAR,IAAI,CAAC,wBAAD,EAA2B,YAAM;AACnCE,EAAAA,MAAM,CAAC,uBAAYe,SAAZ,EAAuB,EAAvB,CAAD,CAAN,CAAmCD,OAAnC,CAA2C;AAACE,IAAAA,KAAK,EAAE;AAAR,GAA3C;AACD,CAFG,CAAJ","sourcesContent":["import React from 'react';\nimport renderer, { act } from 'react-test-renderer';\nimport HomeScreen from '../screens/HomeScreen';\nimport { Provider } from 'react-redux';\nimport { Store } from \"../redux/store\";\nimport userReducer from '../redux/reducers';\n\n\njest.useFakeTimers();\n\nconst store = { Store };\n\nconst tree = renderer.create(\n  <Provider store={Store}>\n    <HomeScreen/>\n   </Provider>)\n\ntest('renders correctly', () => {\n  tree.toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\ntest(\"call timeout\", () => {\n  jest.mock(\"axios\", () => ({\n    get: jest.fn(() => {\n      return Promise.resolve();\n    })\n  }));  \n  act(() => jest.runAllTimers());\n  const text = tree.root.findByProps({testID: \"myText\"}).props;\n  expect(text.children).toEqual(\"Mobile App Listing\");\n})\n\ntest(\"checking mock api call with axios\", () => {\n  jest.mock(\"axios\", () => ({\n    get: jest.fn(() => {\n      return Promise.resolve();\n    })\n  }));\n})\n\ntest(\"status stored properly\", () => {\n  expect(userReducer(undefined, {})).toEqual({users: []})\n})\n"]}