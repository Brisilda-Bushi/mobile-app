65461c82d6a18f28ee18bdcf58fe81f7
'use strict';

var utils = require("./../utils");

var transformData = require("./transformData");

var isCancel = require("../cancel/isCancel");

var defaults = require("../defaults");

var Cancel = require("../cancel/Cancel");

function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }

  if (config.signal && config.signal.aborted) {
    throw new Cancel('canceled');
  }
}

module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);
  config.headers = config.headers || {};
  config.data = transformData.call(config, config.data, config.headers, config.transformRequest);
  config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);
  utils.forEach(['delete', 'get', 'head', 'post', 'put', 'patch', 'common'], function cleanHeaderConfig(method) {
    delete config.headers[method];
  });
  var adapter = config.adapter || defaults.adapter;
  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);
    response.data = transformData.call(config, response.data, response.headers, config.transformResponse);
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      if (reason && reason.response) {
        reason.response.data = transformData.call(config, reason.response.data, reason.response.headers, config.transformResponse);
      }
    }

    return Promise.reject(reason);
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRpc3BhdGNoUmVxdWVzdC5qcyJdLCJuYW1lcyI6WyJ1dGlscyIsInJlcXVpcmUiLCJ0cmFuc2Zvcm1EYXRhIiwiaXNDYW5jZWwiLCJkZWZhdWx0cyIsIkNhbmNlbCIsInRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJjb25maWciLCJjYW5jZWxUb2tlbiIsInRocm93SWZSZXF1ZXN0ZWQiLCJzaWduYWwiLCJhYm9ydGVkIiwibW9kdWxlIiwiZXhwb3J0cyIsImRpc3BhdGNoUmVxdWVzdCIsImhlYWRlcnMiLCJkYXRhIiwiY2FsbCIsInRyYW5zZm9ybVJlcXVlc3QiLCJtZXJnZSIsImNvbW1vbiIsIm1ldGhvZCIsImZvckVhY2giLCJjbGVhbkhlYWRlckNvbmZpZyIsImFkYXB0ZXIiLCJ0aGVuIiwib25BZGFwdGVyUmVzb2x1dGlvbiIsInJlc3BvbnNlIiwidHJhbnNmb3JtUmVzcG9uc2UiLCJvbkFkYXB0ZXJSZWplY3Rpb24iLCJyZWFzb24iLCJQcm9taXNlIiwicmVqZWN0Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJQSxLQUFLLEdBQUdDLE9BQU8sY0FBbkI7O0FBQ0EsSUFBSUMsYUFBYSxHQUFHRCxPQUFPLG1CQUEzQjs7QUFDQSxJQUFJRSxRQUFRLEdBQUdGLE9BQU8sc0JBQXRCOztBQUNBLElBQUlHLFFBQVEsR0FBR0gsT0FBTyxlQUF0Qjs7QUFDQSxJQUFJSSxNQUFNLEdBQUdKLE9BQU8sb0JBQXBCOztBQUtBLFNBQVNLLDRCQUFULENBQXNDQyxNQUF0QyxFQUE4QztBQUM1QyxNQUFJQSxNQUFNLENBQUNDLFdBQVgsRUFBd0I7QUFDdEJELElBQUFBLE1BQU0sQ0FBQ0MsV0FBUCxDQUFtQkMsZ0JBQW5CO0FBQ0Q7O0FBRUQsTUFBSUYsTUFBTSxDQUFDRyxNQUFQLElBQWlCSCxNQUFNLENBQUNHLE1BQVAsQ0FBY0MsT0FBbkMsRUFBNEM7QUFDMUMsVUFBTSxJQUFJTixNQUFKLENBQVcsVUFBWCxDQUFOO0FBQ0Q7QUFDRjs7QUFRRE8sTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFNBQVNDLGVBQVQsQ0FBeUJQLE1BQXpCLEVBQWlDO0FBQ2hERCxFQUFBQSw0QkFBNEIsQ0FBQ0MsTUFBRCxDQUE1QjtBQUdBQSxFQUFBQSxNQUFNLENBQUNRLE9BQVAsR0FBaUJSLE1BQU0sQ0FBQ1EsT0FBUCxJQUFrQixFQUFuQztBQUdBUixFQUFBQSxNQUFNLENBQUNTLElBQVAsR0FBY2QsYUFBYSxDQUFDZSxJQUFkLENBQ1pWLE1BRFksRUFFWkEsTUFBTSxDQUFDUyxJQUZLLEVBR1pULE1BQU0sQ0FBQ1EsT0FISyxFQUlaUixNQUFNLENBQUNXLGdCQUpLLENBQWQ7QUFRQVgsRUFBQUEsTUFBTSxDQUFDUSxPQUFQLEdBQWlCZixLQUFLLENBQUNtQixLQUFOLENBQ2ZaLE1BQU0sQ0FBQ1EsT0FBUCxDQUFlSyxNQUFmLElBQXlCLEVBRFYsRUFFZmIsTUFBTSxDQUFDUSxPQUFQLENBQWVSLE1BQU0sQ0FBQ2MsTUFBdEIsS0FBaUMsRUFGbEIsRUFHZmQsTUFBTSxDQUFDUSxPQUhRLENBQWpCO0FBTUFmLEVBQUFBLEtBQUssQ0FBQ3NCLE9BQU4sQ0FDRSxDQUFDLFFBQUQsRUFBVyxLQUFYLEVBQWtCLE1BQWxCLEVBQTBCLE1BQTFCLEVBQWtDLEtBQWxDLEVBQXlDLE9BQXpDLEVBQWtELFFBQWxELENBREYsRUFFRSxTQUFTQyxpQkFBVCxDQUEyQkYsTUFBM0IsRUFBbUM7QUFDakMsV0FBT2QsTUFBTSxDQUFDUSxPQUFQLENBQWVNLE1BQWYsQ0FBUDtBQUNELEdBSkg7QUFPQSxNQUFJRyxPQUFPLEdBQUdqQixNQUFNLENBQUNpQixPQUFQLElBQWtCcEIsUUFBUSxDQUFDb0IsT0FBekM7QUFFQSxTQUFPQSxPQUFPLENBQUNqQixNQUFELENBQVAsQ0FBZ0JrQixJQUFoQixDQUFxQixTQUFTQyxtQkFBVCxDQUE2QkMsUUFBN0IsRUFBdUM7QUFDakVyQixJQUFBQSw0QkFBNEIsQ0FBQ0MsTUFBRCxDQUE1QjtBQUdBb0IsSUFBQUEsUUFBUSxDQUFDWCxJQUFULEdBQWdCZCxhQUFhLENBQUNlLElBQWQsQ0FDZFYsTUFEYyxFQUVkb0IsUUFBUSxDQUFDWCxJQUZLLEVBR2RXLFFBQVEsQ0FBQ1osT0FISyxFQUlkUixNQUFNLENBQUNxQixpQkFKTyxDQUFoQjtBQU9BLFdBQU9ELFFBQVA7QUFDRCxHQVpNLEVBWUosU0FBU0Usa0JBQVQsQ0FBNEJDLE1BQTVCLEVBQW9DO0FBQ3JDLFFBQUksQ0FBQzNCLFFBQVEsQ0FBQzJCLE1BQUQsQ0FBYixFQUF1QjtBQUNyQnhCLE1BQUFBLDRCQUE0QixDQUFDQyxNQUFELENBQTVCOztBQUdBLFVBQUl1QixNQUFNLElBQUlBLE1BQU0sQ0FBQ0gsUUFBckIsRUFBK0I7QUFDN0JHLFFBQUFBLE1BQU0sQ0FBQ0gsUUFBUCxDQUFnQlgsSUFBaEIsR0FBdUJkLGFBQWEsQ0FBQ2UsSUFBZCxDQUNyQlYsTUFEcUIsRUFFckJ1QixNQUFNLENBQUNILFFBQVAsQ0FBZ0JYLElBRkssRUFHckJjLE1BQU0sQ0FBQ0gsUUFBUCxDQUFnQlosT0FISyxFQUlyQlIsTUFBTSxDQUFDcUIsaUJBSmMsQ0FBdkI7QUFNRDtBQUNGOztBQUVELFdBQU9HLE9BQU8sQ0FBQ0MsTUFBUixDQUFlRixNQUFmLENBQVA7QUFDRCxHQTVCTSxDQUFQO0FBNkJELENBM0REIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgdHJhbnNmb3JtRGF0YSA9IHJlcXVpcmUoJy4vdHJhbnNmb3JtRGF0YScpO1xudmFyIGlzQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL2lzQ2FuY2VsJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xudmFyIENhbmNlbCA9IHJlcXVpcmUoJy4uL2NhbmNlbC9DYW5jZWwnKTtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxuXG4gIGlmIChjb25maWcuc2lnbmFsICYmIGNvbmZpZy5zaWduYWwuYWJvcnRlZCkge1xuICAgIHRocm93IG5ldyBDYW5jZWwoJ2NhbmNlbGVkJyk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgLy8gRW5zdXJlIGhlYWRlcnMgZXhpc3RcbiAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgIGNvbmZpZyxcbiAgICBjb25maWcuZGF0YSxcbiAgICBjb25maWcuaGVhZGVycyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICBjb25maWcuaGVhZGVycyA9IHV0aWxzLm1lcmdlKFxuICAgIGNvbmZpZy5oZWFkZXJzLmNvbW1vbiB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1tjb25maWcubWV0aG9kXSB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1xuICApO1xuXG4gIHV0aWxzLmZvckVhY2goXG4gICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgZnVuY3Rpb24gY2xlYW5IZWFkZXJDb25maWcobWV0aG9kKSB7XG4gICAgICBkZWxldGUgY29uZmlnLmhlYWRlcnNbbWV0aG9kXTtcbiAgICB9XG4gICk7XG5cbiAgdmFyIGFkYXB0ZXIgPSBjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgY29uZmlnLFxuICAgICAgcmVzcG9uc2UuZGF0YSxcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufTtcbiJdfQ==