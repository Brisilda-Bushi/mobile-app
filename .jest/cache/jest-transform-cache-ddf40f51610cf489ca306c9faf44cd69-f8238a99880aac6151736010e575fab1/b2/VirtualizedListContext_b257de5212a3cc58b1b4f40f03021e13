ac1a5a6de6656dc872a852604b69787c
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VirtualizedListCellContextProvider = VirtualizedListCellContextProvider;
exports.VirtualizedListContext = void 0;
exports.VirtualizedListContextProvider = VirtualizedListContextProvider;
exports.VirtualizedListContextResetter = VirtualizedListContextResetter;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var React = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var VirtualizedListContext = React.createContext(null);
exports.VirtualizedListContext = VirtualizedListContext;

function VirtualizedListContextResetter(_ref) {
  var children = _ref.children;
  return React.createElement(VirtualizedListContext.Provider, {
    value: null
  }, children);
}

function VirtualizedListContextProvider(_ref2) {
  var children = _ref2.children,
      value = _ref2.value;
  var context = (0, React.useMemo)(function () {
    return {
      cellKey: null,
      getScrollMetrics: value.getScrollMetrics,
      horizontal: value.horizontal,
      getOutermostParentListRef: value.getOutermostParentListRef,
      getNestedChildState: value.getNestedChildState,
      registerAsNestedChild: value.registerAsNestedChild,
      unregisterAsNestedChild: value.unregisterAsNestedChild,
      debugInfo: {
        cellKey: value.debugInfo.cellKey,
        horizontal: value.debugInfo.horizontal,
        listKey: value.debugInfo.listKey,
        parent: value.debugInfo.parent
      }
    };
  }, [value.getScrollMetrics, value.horizontal, value.getOutermostParentListRef, value.getNestedChildState, value.registerAsNestedChild, value.unregisterAsNestedChild, value.debugInfo.cellKey, value.debugInfo.horizontal, value.debugInfo.listKey, value.debugInfo.parent]);
  return React.createElement(VirtualizedListContext.Provider, {
    value: context
  }, children);
}

function VirtualizedListCellContextProvider(_ref3) {
  var cellKey = _ref3.cellKey,
      children = _ref3.children;
  var context = (0, React.useContext)(VirtualizedListContext);
  return React.createElement(VirtualizedListContext.Provider, {
    value: context == null ? null : _objectSpread(_objectSpread({}, context), {}, {
      cellKey: cellKey
    })
  }, children);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlZpcnR1YWxpemVkTGlzdENvbnRleHQuanMiXSwibmFtZXMiOlsiVmlydHVhbGl6ZWRMaXN0Q29udGV4dCIsIlJlYWN0IiwiY3JlYXRlQ29udGV4dCIsIlZpcnR1YWxpemVkTGlzdENvbnRleHRSZXNldHRlciIsImNoaWxkcmVuIiwiVmlydHVhbGl6ZWRMaXN0Q29udGV4dFByb3ZpZGVyIiwidmFsdWUiLCJjb250ZXh0IiwiY2VsbEtleSIsImdldFNjcm9sbE1ldHJpY3MiLCJob3Jpem9udGFsIiwiZ2V0T3V0ZXJtb3N0UGFyZW50TGlzdFJlZiIsImdldE5lc3RlZENoaWxkU3RhdGUiLCJyZWdpc3RlckFzTmVzdGVkQ2hpbGQiLCJ1bnJlZ2lzdGVyQXNOZXN0ZWRDaGlsZCIsImRlYnVnSW5mbyIsImxpc3RLZXkiLCJwYXJlbnQiLCJWaXJ0dWFsaXplZExpc3RDZWxsQ29udGV4dFByb3ZpZGVyIl0sIm1hcHBpbmdzIjoiQUFVQTs7Ozs7Ozs7Ozs7Ozs7QUFHQTs7Ozs7Ozs7OztBQXVETyxJQUFNQSxzQkFBK0MsR0FBR0MsS0FBSyxDQUFDQyxhQUFOLENBQzdELElBRDZELENBQXhEOzs7QUFPQSxTQUFTQyw4QkFBVCxPQUlRO0FBQUEsTUFIYkMsUUFHYSxRQUhiQSxRQUdhO0FBQ2IsU0FDRSxvQkFBQyxzQkFBRCxDQUF3QixRQUF4QjtBQUFpQyxJQUFBLEtBQUssRUFBRTtBQUF4QyxLQUNHQSxRQURILENBREY7QUFLRDs7QUFLTSxTQUFTQyw4QkFBVCxRQU1RO0FBQUEsTUFMYkQsUUFLYSxTQUxiQSxRQUthO0FBQUEsTUFKYkUsS0FJYSxTQUpiQSxLQUlhO0FBRWIsTUFBTUMsT0FBTyxHQUFHLG1CQUNkO0FBQUEsV0FBTztBQUNMQyxNQUFBQSxPQUFPLEVBQUUsSUFESjtBQUVMQyxNQUFBQSxnQkFBZ0IsRUFBRUgsS0FBSyxDQUFDRyxnQkFGbkI7QUFHTEMsTUFBQUEsVUFBVSxFQUFFSixLQUFLLENBQUNJLFVBSGI7QUFJTEMsTUFBQUEseUJBQXlCLEVBQUVMLEtBQUssQ0FBQ0sseUJBSjVCO0FBS0xDLE1BQUFBLG1CQUFtQixFQUFFTixLQUFLLENBQUNNLG1CQUx0QjtBQU1MQyxNQUFBQSxxQkFBcUIsRUFBRVAsS0FBSyxDQUFDTyxxQkFOeEI7QUFPTEMsTUFBQUEsdUJBQXVCLEVBQUVSLEtBQUssQ0FBQ1EsdUJBUDFCO0FBUUxDLE1BQUFBLFNBQVMsRUFBRTtBQUNUUCxRQUFBQSxPQUFPLEVBQUVGLEtBQUssQ0FBQ1MsU0FBTixDQUFnQlAsT0FEaEI7QUFFVEUsUUFBQUEsVUFBVSxFQUFFSixLQUFLLENBQUNTLFNBQU4sQ0FBZ0JMLFVBRm5CO0FBR1RNLFFBQUFBLE9BQU8sRUFBRVYsS0FBSyxDQUFDUyxTQUFOLENBQWdCQyxPQUhoQjtBQUlUQyxRQUFBQSxNQUFNLEVBQUVYLEtBQUssQ0FBQ1MsU0FBTixDQUFnQkU7QUFKZjtBQVJOLEtBQVA7QUFBQSxHQURjLEVBZ0JkLENBQ0VYLEtBQUssQ0FBQ0csZ0JBRFIsRUFFRUgsS0FBSyxDQUFDSSxVQUZSLEVBR0VKLEtBQUssQ0FBQ0sseUJBSFIsRUFJRUwsS0FBSyxDQUFDTSxtQkFKUixFQUtFTixLQUFLLENBQUNPLHFCQUxSLEVBTUVQLEtBQUssQ0FBQ1EsdUJBTlIsRUFPRVIsS0FBSyxDQUFDUyxTQUFOLENBQWdCUCxPQVBsQixFQVFFRixLQUFLLENBQUNTLFNBQU4sQ0FBZ0JMLFVBUmxCLEVBU0VKLEtBQUssQ0FBQ1MsU0FBTixDQUFnQkMsT0FUbEIsRUFVRVYsS0FBSyxDQUFDUyxTQUFOLENBQWdCRSxNQVZsQixDQWhCYyxDQUFoQjtBQTZCQSxTQUNFLG9CQUFDLHNCQUFELENBQXdCLFFBQXhCO0FBQWlDLElBQUEsS0FBSyxFQUFFVjtBQUF4QyxLQUNHSCxRQURILENBREY7QUFLRDs7QUFLTSxTQUFTYyxrQ0FBVCxRQU1RO0FBQUEsTUFMYlYsT0FLYSxTQUxiQSxPQUthO0FBQUEsTUFKYkosUUFJYSxTQUpiQSxRQUlhO0FBQ2IsTUFBTUcsT0FBTyxHQUFHLHNCQUFXUCxzQkFBWCxDQUFoQjtBQUNBLFNBQ0Usb0JBQUMsc0JBQUQsQ0FBd0IsUUFBeEI7QUFDRSxJQUFBLEtBQUssRUFBRU8sT0FBTyxJQUFJLElBQVgsR0FBa0IsSUFBbEIsbUNBQTZCQSxPQUE3QjtBQUFzQ0MsTUFBQUEsT0FBTyxFQUFQQTtBQUF0QztBQURULEtBRUdKLFFBRkgsQ0FERjtBQU1EIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqIEBmb3JtYXRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCB0eXBlIFZpcnR1YWxpemVkTGlzdCBmcm9tICcuL1ZpcnR1YWxpemVkTGlzdC5qcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge3VzZU1lbW8sIHVzZUNvbnRleHR9IGZyb20gJ3JlYWN0JztcblxudHlwZSBGcmFtZSA9ICRSZWFkT25seTx7XG4gIG9mZnNldDogbnVtYmVyLFxuICBsZW5ndGg6IG51bWJlcixcbiAgaW5kZXg6IG51bWJlcixcbiAgaW5MYXlvdXQ6IGJvb2xlYW4sXG59PjtcblxuZXhwb3J0IHR5cGUgQ2hpbGRMaXN0U3RhdGUgPSAkUmVhZE9ubHk8e1xuICBmaXJzdDogbnVtYmVyLFxuICBsYXN0OiBudW1iZXIsXG4gIGZyYW1lczoge1trZXk6IG51bWJlcl06IEZyYW1lfSxcbn0+O1xuXG4vLyBEYXRhIHByb3BhZ2F0ZWQgdGhyb3VnaCBuZXN0ZWQgbGlzdHMgKHJlZ2FyZGxlc3Mgb2Ygb3JpZW50YXRpb24pIHRoYXQgaXNcbi8vIHVzZWZ1bCBmb3IgcHJvZHVjaW5nIGRpYWdub3N0aWNzIGZvciB1c2FnZSBlcnJvcnMgaW52b2x2aW5nIG5lc3RpbmcgKGUuZ1xuLy8gbWlzc2luZy9kdXBsaWNhdGUga2V5cykuXG5leHBvcnQgdHlwZSBMaXN0RGVidWdJbmZvID0gJFJlYWRPbmx5PHtcbiAgY2VsbEtleTogc3RyaW5nLFxuICBsaXN0S2V5OiBzdHJpbmcsXG4gIHBhcmVudDogP0xpc3REZWJ1Z0luZm8sXG4gIC8vIFdlIGluY2x1ZGUgYWxsIGFuY2VzdG9ycyByZWdhcmRsZXNzIG9mIG9yaWVudGF0aW9uLCBzbyB0aGlzIGlzIG5vdCBhbHdheXNcbiAgLy8gaWRlbnRpY2FsIHRvIHRoZSBjaGlsZCdzIG9yaWVudGF0aW9uLlxuICBob3Jpem9udGFsOiBib29sZWFuLFxufT47XG5cbnR5cGUgQ29udGV4dCA9ICRSZWFkT25seTx7XG4gIGNlbGxLZXk6ID9zdHJpbmcsXG4gIGdldFNjcm9sbE1ldHJpY3M6ICgpID0+IHtcbiAgICBjb250ZW50TGVuZ3RoOiBudW1iZXIsXG4gICAgZE9mZnNldDogbnVtYmVyLFxuICAgIGR0OiBudW1iZXIsXG4gICAgb2Zmc2V0OiBudW1iZXIsXG4gICAgdGltZXN0YW1wOiBudW1iZXIsXG4gICAgdmVsb2NpdHk6IG51bWJlcixcbiAgICB2aXNpYmxlTGVuZ3RoOiBudW1iZXIsXG4gIH0sXG4gIGhvcml6b250YWw6ID9ib29sZWFuLFxuICBnZXRPdXRlcm1vc3RQYXJlbnRMaXN0UmVmOiAoKSA9PiBWaXJ0dWFsaXplZExpc3QsXG4gIGdldE5lc3RlZENoaWxkU3RhdGU6IHN0cmluZyA9PiA/Q2hpbGRMaXN0U3RhdGUsXG4gIHJlZ2lzdGVyQXNOZXN0ZWRDaGlsZDogKHtcbiAgICBjZWxsS2V5OiBzdHJpbmcsXG4gICAga2V5OiBzdHJpbmcsXG4gICAgcmVmOiBWaXJ0dWFsaXplZExpc3QsXG4gICAgcGFyZW50RGVidWdJbmZvOiBMaXN0RGVidWdJbmZvLFxuICB9KSA9PiA/Q2hpbGRMaXN0U3RhdGUsXG4gIHVucmVnaXN0ZXJBc05lc3RlZENoaWxkOiAoe1xuICAgIGtleTogc3RyaW5nLFxuICAgIHN0YXRlOiBDaGlsZExpc3RTdGF0ZSxcbiAgfSkgPT4gdm9pZCxcbiAgZGVidWdJbmZvOiBMaXN0RGVidWdJbmZvLFxufT47XG5cbmV4cG9ydCBjb25zdCBWaXJ0dWFsaXplZExpc3RDb250ZXh0OiBSZWFjdC5Db250ZXh0PD9Db250ZXh0PiA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoXG4gIG51bGwsXG4pO1xuXG4vKipcbiAqIFJlc2V0cyB0aGUgY29udGV4dC4gSW50ZW5kZWQgZm9yIHVzZSBieSBwb3J0YWwtbGlrZSBjb21wb25lbnRzIChlLmcuIE1vZGFsKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFZpcnR1YWxpemVkTGlzdENvbnRleHRSZXNldHRlcih7XG4gIGNoaWxkcmVuLFxufToge1xuICBjaGlsZHJlbjogUmVhY3QuTm9kZSxcbn0pOiBSZWFjdC5Ob2RlIHtcbiAgcmV0dXJuIChcbiAgICA8VmlydHVhbGl6ZWRMaXN0Q29udGV4dC5Qcm92aWRlciB2YWx1ZT17bnVsbH0+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9WaXJ0dWFsaXplZExpc3RDb250ZXh0LlByb3ZpZGVyPlxuICApO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIGNvbnRleHQgd2l0aCBtZW1vaXphdGlvbi4gSW50ZW5kZWQgdG8gYmUgdXNlZCBieSBgVmlydHVhbGl6ZWRMaXN0YC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFZpcnR1YWxpemVkTGlzdENvbnRleHRQcm92aWRlcih7XG4gIGNoaWxkcmVuLFxuICB2YWx1ZSxcbn06IHtcbiAgY2hpbGRyZW46IFJlYWN0Lk5vZGUsXG4gIHZhbHVlOiBDb250ZXh0LFxufSk6IFJlYWN0Lk5vZGUge1xuICAvLyBBdm9pZCBzZXR0aW5nIGEgbmV3bHkgY3JlYXRlZCBjb250ZXh0IG9iamVjdCBpZiB0aGUgdmFsdWVzIGFyZSBpZGVudGljYWwuXG4gIGNvbnN0IGNvbnRleHQgPSB1c2VNZW1vKFxuICAgICgpID0+ICh7XG4gICAgICBjZWxsS2V5OiBudWxsLFxuICAgICAgZ2V0U2Nyb2xsTWV0cmljczogdmFsdWUuZ2V0U2Nyb2xsTWV0cmljcyxcbiAgICAgIGhvcml6b250YWw6IHZhbHVlLmhvcml6b250YWwsXG4gICAgICBnZXRPdXRlcm1vc3RQYXJlbnRMaXN0UmVmOiB2YWx1ZS5nZXRPdXRlcm1vc3RQYXJlbnRMaXN0UmVmLFxuICAgICAgZ2V0TmVzdGVkQ2hpbGRTdGF0ZTogdmFsdWUuZ2V0TmVzdGVkQ2hpbGRTdGF0ZSxcbiAgICAgIHJlZ2lzdGVyQXNOZXN0ZWRDaGlsZDogdmFsdWUucmVnaXN0ZXJBc05lc3RlZENoaWxkLFxuICAgICAgdW5yZWdpc3RlckFzTmVzdGVkQ2hpbGQ6IHZhbHVlLnVucmVnaXN0ZXJBc05lc3RlZENoaWxkLFxuICAgICAgZGVidWdJbmZvOiB7XG4gICAgICAgIGNlbGxLZXk6IHZhbHVlLmRlYnVnSW5mby5jZWxsS2V5LFxuICAgICAgICBob3Jpem9udGFsOiB2YWx1ZS5kZWJ1Z0luZm8uaG9yaXpvbnRhbCxcbiAgICAgICAgbGlzdEtleTogdmFsdWUuZGVidWdJbmZvLmxpc3RLZXksXG4gICAgICAgIHBhcmVudDogdmFsdWUuZGVidWdJbmZvLnBhcmVudCxcbiAgICAgIH0sXG4gICAgfSksXG4gICAgW1xuICAgICAgdmFsdWUuZ2V0U2Nyb2xsTWV0cmljcyxcbiAgICAgIHZhbHVlLmhvcml6b250YWwsXG4gICAgICB2YWx1ZS5nZXRPdXRlcm1vc3RQYXJlbnRMaXN0UmVmLFxuICAgICAgdmFsdWUuZ2V0TmVzdGVkQ2hpbGRTdGF0ZSxcbiAgICAgIHZhbHVlLnJlZ2lzdGVyQXNOZXN0ZWRDaGlsZCxcbiAgICAgIHZhbHVlLnVucmVnaXN0ZXJBc05lc3RlZENoaWxkLFxuICAgICAgdmFsdWUuZGVidWdJbmZvLmNlbGxLZXksXG4gICAgICB2YWx1ZS5kZWJ1Z0luZm8uaG9yaXpvbnRhbCxcbiAgICAgIHZhbHVlLmRlYnVnSW5mby5saXN0S2V5LFxuICAgICAgdmFsdWUuZGVidWdJbmZvLnBhcmVudCxcbiAgICBdLFxuICApO1xuICByZXR1cm4gKFxuICAgIDxWaXJ0dWFsaXplZExpc3RDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtjb250ZXh0fT5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L1ZpcnR1YWxpemVkTGlzdENvbnRleHQuUHJvdmlkZXI+XG4gICk7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgYGNlbGxLZXlgLiBJbnRlbmRlZCB0byBiZSB1c2VkIGJ5IGBWaXJ0dWFsaXplZExpc3RgIGZvciBlYWNoIGNlbGwuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBWaXJ0dWFsaXplZExpc3RDZWxsQ29udGV4dFByb3ZpZGVyKHtcbiAgY2VsbEtleSxcbiAgY2hpbGRyZW4sXG59OiB7XG4gIGNlbGxLZXk6IHN0cmluZyxcbiAgY2hpbGRyZW46IFJlYWN0Lk5vZGUsXG59KTogUmVhY3QuTm9kZSB7XG4gIGNvbnN0IGNvbnRleHQgPSB1c2VDb250ZXh0KFZpcnR1YWxpemVkTGlzdENvbnRleHQpO1xuICByZXR1cm4gKFxuICAgIDxWaXJ0dWFsaXplZExpc3RDb250ZXh0LlByb3ZpZGVyXG4gICAgICB2YWx1ZT17Y29udGV4dCA9PSBudWxsID8gbnVsbCA6IHsuLi5jb250ZXh0LCBjZWxsS2V5fX0+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9WaXJ0dWFsaXplZExpc3RDb250ZXh0LlByb3ZpZGVyPlxuICApO1xufVxuIl19